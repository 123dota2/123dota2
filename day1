Go学习第一天
go mod init 
initializes and writes a new go.mode file

语言特性
自动垃圾回收
更丰富的内置类型
函数多返回值
错误处理
匿名函数和闭包
类型和接口
并发编程
反射
语言交互性

核心优势
强表达能力，简洁而高效
并发机制，有效利用多核和联网的计算机：并发执行单元goroutine
结构灵活且模块化
编译迅速，具备垃圾收集和反射机制：stop world，吧可回收对象在一段bitmap上打上标记，然后start the world，同时起一个专门的goroutine回收内存
是一个快速的静态类型编译型语言

go的内存分配
初始阶段直接分配一大块内存区域。
各个等级的小块存在不同的空闲list当中，对象重新分配空间时从空闲空间取出合适大小的块。

不支持try。。carch

类型推导
支持var abc=10
看起来像动态语言

无法循环引用，好处在于避免了一些潜在的编程风险

defer机制。代表延迟执行

包的概念
类似python，相同的代码放在一个目录下。作用在于提高代码的可复用性，通过package可以引入其他包

并发和并行的概念
进程代表一个程序的运行活动
线程代表一个进程的多个执行路径
并发代表单个cpu在多个线程或进程之间复用
并行代表两个或多个事件同时发生，不存在竞争和等待
二者都提高的程序的运行效率，最大限度的利用了cpu资源

动态语言和静态语言
静态语言代表编译时需要知道变量类型
动态语言则不然，在runtime做type checking，开发速度更快

unicode和utf-8
utf-8：对于单字节，第一位设为0
n字节的第一个字节前n位设为1，n+1位设为0，后面的字节前两位设为10
unicode：知道字符，查找对应binary code的速度快，但是反过来可能会发生混乱。
相比较之下，utf相当于告知计算机字符长度
